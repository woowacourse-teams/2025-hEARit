package com.onair.hearit.infrastructure;

import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.onair.hearit.dto.response.HearitCreationResponse;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class GeminiClientTest {

    @Autowired
    GeminiClient geminiClient;

    @Test
    void test() throws JsonProcessingException {
        String promptText = """
                주어진 텍스트를 바탕으로 1인 진행 팟캐스트 대본을 생성해.
                출력은 title: "", script:  "" 형식으로 해.
                첫 번째 에는 해당 대본의 내용을 잘 나타내는 제목이, 두번째에는 대본 내용이 들어가게 해.
                script에는 제목을 포함하지마.
                제공한 텍스트 내용 외에 어떠한 추가적인 지식이나 내용을 포함하지 마.
                팟캐스트는 시작 인사와 마무리 인사를 포함하여 자연스러운 흐름으로 구성.
                주어진 텍스트의 내용을 충분히 다루면서, 5분에서 20분 사이의 적절한 길이로 대본을 구성해.
                원문의 핵심 내용을 중심으로 유머러스한 표현이나 흥미로운 비유를 적절히 사용하여 청취자의 몰입도를 높여.
                대본은 오직 텍스트로만 구성해.
                어떠한 지시어, 기호, 괄호 안의 설명 등도 포함하지 마.
                즉시 TTS 생성에 사용될 수 있도록 순수한 대본 내용만 출력해.
                발음이 명확하고, 문장의 호흡이 자연스럽게 끊어지도록 작성하는 것이 중요해.
                
                [팟캐스트로 만들고 싶은 텍스트]
            """;
        String originText = """
            자바 30주년 - 기술을 바꾼 코드의 천재, 제임스 고슬링 인터뷰 (thenewstack.io)
            28P by GN⁺ 2달전 | ★ favorite | 댓글 13개
            제임스 고슬링은 자바의 창시자이자, 30년간 현대 컴퓨팅에 영향을 끼친 실용적 천재로 평가됨
            가난한 환경에서 쓰레기 더미 속 부품으로 컴퓨터를 조립하며 프로그래밍을 배웠고, 이 자기주도적 학습은 이후 언어 설계 철학에도 반영
            Sun Microsystems에서 장난과 혁신이 공존했던 시절은 고슬링 특유의 창의성과 기술 문화 조성의 기반이 됨
            최근 그는 생성형 AI 도구와 AI 붐에 대해 강한 회의감을 드러냈으며, 프로그래밍 교육의 중요성은 오히려 커졌다고 강조
            자바의 생존 비결은 화려함이 아닌 안정성, 하위호환성, 개발자 생산성을 철저히 지향한 실용주의적 설계 철학 덕분이었음
            Java at 30: The Genius Behind the Code That Changed Tech
            자바는 5월 23일로 30주년을 맞이하는 범용 고수준 객체지향 언어로, 오늘날에도 다양한 규모의 시스템을 구동하는 핵심 기술임
            자바가 존재할 수 있었던 근본에는 제임스 고슬링의 실용적 기술 감각과 창조적 직관력이 자리함
            고슬링은 쓰레기통에서 부품을 모아 컴퓨터를 조립하던 캐나다 출신의 자립심 강한 십대에서 출발해 세계적 프로그래머로 성장함
            ‘한 번 작성하면 어디서나 실행된다’는 철학은 자바의 상징이며, 이는 곧 소프트웨어 개발 방식에 근본적 전환을 이끈 언어 철학으로 이어짐
            고슬링은 커리어 내내 기술적 탁월성과 장난기, 그리고 뚜렷한 윤리 의식을 조화시키며 현대 컴퓨팅 문화 형성에 지속적 영향을 준 개발자상을 구현함
            James Gosling: The Brilliant Mind Behind Java
            제임스 고슬링은 단순한 ‘자바의 아버지’가 아니라, 복잡한 개념을 직관적으로 설명할 줄 아는 겸손한 천재임
            자바를 만든 지 30년이 지난 지금, 그는 기술 여정을 되돌아보며 언어와 개발 문화의 진화 과정을 되짚는 시간을 가짐
            The Path To Programming: Resourceful Beginnings
            어린 시절 극도로 가난한 환경 속에서 고슬링은 쓰레기통에서 텔레비전을 주워 기술적 창의력을 키운 경험을 가짐
            첫 컴퓨터는 전화국의 폐기 릴레이 랙으로 조립했으며, 이는 이른 시기부터 드러난 기계적 감각과 조립 능력을 상징함
            캘거리 대학의 컴퓨터 센터를 방문하며 화면, 깜빡이는 불빛, 테이프 장치 등에 매료되어 프로그래밍에 대한 평생의 호기심이 시작됨
            그는 펀치카드를 뒤져 비밀번호를 얻는 방식으로 독학했으며, 고등학생 시절 대학 물리학과에서 위성 데이터 분석 프로그램을 만들어 돈을 받으며 프로그래밍을 즐긴 경험을 축적함
            그의 초기 프로그래밍 경험은 IBM 메인프레임의 PL/1, Fortran, PDP-8 어셈블리어, CDC 6400 코드에 걸쳐 있음. 특유의 절제된 어조로 "여름엔 COBOL 컴파일러를 개발하는 아르바이트를 했다"고 가볍게 언급했는데, 이는 많은 노련한 프로그래머들이 감당하기 어려워하는 작업이었음
            Academia to Industry: Finding His Way
            고슬링은 학계를 “대학원생을 값싼 인건비로 활용하는 연구소”라고 표현하며, 이론보다 실용을 중시하는 직설적 관점을 드러냄
            카네기멜론 박사과정 중에도 스타트업에서 근무하며 현실적 경험을 쌓고, 이후 학위 과정을 마치는 산업과 학계를 병행한 유연한 진로 선택을 실현함
            첫 직장은 IBM 리서치였지만, “자기 발을 쏘는 데 헌신적인 회사”라는 평가를 남기며 기업 운영과 기술 전략에 대한 냉철한 분석 태도를 유지함
            이러한 초기 경험들은 이후 Sun Microsystems에서의 활동 방식에 영향을 준 현실 중심의 조직문화 이해 기반이 됨
            The Sun Days: Innovation and Pranks
            Sun에서 가장 즐거웠던 기억으로 고슬링은 매년 진행된 대규모 만우절 장난 프로젝트를 꼽으며, 창의성과 유쾌함이 공존했던 조직문화를 회상함
            대표적 장난 사례로는 연못 위 플랫폼에 페라리를 띄워놓는 작업이 있었고, 이는 공학적 문제 해결 능력과 팀워크를 활용한 유머 감각을 보여주는 사례였음
            CEO 사무실에 인공 잔디, 벙커, 워터 해저드를 갖춘 1홀 골프장을 조성한 장난은 기술과 놀이가 결합된 독창적 시도로 언급됨
            고슬링은 Sun을 “기술적 탁월성과 장난기 어린 창의성이 동시에 허용되는 보기 드문 환경”으로 기억하며, 이는 그의 전반적 문제 해결 방식과 기술에 대한 태도 형성의 기반이 되었음
            Java: Creating a Legacy That Changed Everything
            자바 30년의 여정은 고슬링에게 있어 가장 대표적인 성취이자 기술 인생의 결정적 전환점임
            거리에서 “자바 덕분에 커리어를 얻었다”는 인사를 받을 때마다 느끼는 개발자 생태계에 남긴 영향력에 대한 깊은 만족감이 언급됨
            람다와 제네릭 같은 기능은 처음부터 넣고 싶었지만, “틀린 방식으로 넣지 않겠다”는 설계 철학에 따라 도입 시점을 조절함
            Oracle의 자바 관리에 대해서는 “기대보다는 잘했다”고 평가하며, 실제로는 커뮤니티의 지속적 참여와 기여가 핵심 역할을 했다는 점을 강조함
            자바는 클라우드 환경에 최적화되며 발전해왔고, 멀티코어 지원, 메모리 처리, GC 개선 등에서 “정말 굉장한 수준”이라는 기술적 완성도에 도달함
            Beyond Java: Ventures After Sun
            Sun이 Oracle에 인수된 이후 고슬링은 잠시 휴식을 취한 뒤 Google에 입사했으나, 6개월 만에 퇴사 후 Liquid Robotics로 이직함
            그곳에서 자율 해양 로봇 제어 시스템을 개발했으며, 하와이에서 스노클링이 필요한 업무 환경 등 기술과 자연이 결합된 독특한 근무 조건을 경험함
            북극과 남극의 해양 온도를 모니터링하는 프로젝트에 참여했으나, 환경 연구는 자금이 부족해 VC 기반 스타트업 구조와의 충돌을 겪음
            국방 분야로의 전환 압박이 이어지자 윤리적 이유로 퇴사하고, AWS에서 Greengrass 프로젝트와 개발 도구 관련 작업에 참여하며 기술적 흥미와 윤리 기준을 함께 고려한 커리어 선택을 이어감
            On Open Source and Industry Trends: Cutting Through the Hype
            오픈소스는 단순한 협업 도구를 넘어서, 개발자 관계, 마케팅 전략, 바텀업 채택 모델로 작동하는 복합적 생태계로 설명됨
            로우코드·노코드 트렌드에 대해서는 COBOL 시절부터 반복된 주장이라며, 복잡한 도메인에 적용 시 한계를 갖는 특화형 접근 방식으로 회의적인 입장을 표명함
            AI와 머신러닝은 기술보다 명칭이 문제라며, ‘고급 통계 기법’이란 표현이 본질에 더 부합한다는 용어 비판을 제기함
            AI는 도구일 뿐이며 자율적 존재로 오해되어선 안 되며, 인간 노동을 위협하기보단 보조하는 고차원적 도구로 봐야 한다는 입장을 밝힘
            Developer Tools and Preferences: Embracing Progress
            고슬링은 NetBeans IDE를 주요 개발 도구로 사용하며, Apache 라이선스 기반의 오픈소스와 활발한 커뮤니티에 대한 지지 입장을 보임
            여전히 Vi나 70~80년대 도구에 집착하는 개발자들을 향해 기술 진보를 거부하는 태도에 대한 아쉬움을 드러냄
            Vi는 어디서나 실행 가능하다는 이유로 가끔 사용하지만, 본격적인 개발 환경에선 현대적 IDE 사용을 강력히 지지함
            The JVM Vision: From Academic Concept to Global Standard
            자바 가상머신(JVM)의 초기 개념은 고슬링의 대학원 시절에 구상된 아키텍처 중립적 배포 포맷 실험과 명령어 번역 기술 연구에서 출발함
            이는 훗날 자바뿐 아니라 여러 언어가 다양한 하드웨어에서 실행될 수 있는 범용 실행 플랫폼 기술로 발전함
            ‘Write once, run anywhere’ 철학은 처음엔 박사 논문 주제로는 수학적 기반이 부족하다는 이유로 기각되었지만, 세계 소프트웨어 개발 환경을 뒤바꾼 실용 기술로 자리잡음
            More Recent Work: Bridging IoT Gaps at AWS
            고슬링은 AWS에서 IoT 애플리케이션 프레임워크인 Greengrass 개발에 참여하며 복잡한 문제를 우아하게 단순화하는 기술 접근 방식을 구현함
            OTA 업데이트, 원격 제어, 텔레메트리, 네트워크 신뢰성, 보안, 인증 관리 등 배포와 운영 사이의 반복적 보일러플레이트 작업을 추상화함
            디바이스 측 코드가 오픈소스로 공개되어 RISC-V 같은 Amazon 비우선 플랫폼에 대한 커뮤니티 기반 포팅 기여를 유도함
            이후 참여한 또 다른 개발 도구 프로젝트는 AI 붐에 휘말려 중단되며, 기술 진정성보다는 유행 중심의 혼란 속 문제점을 시사함
            AI Skepticism
            고슬링은 최근 인터뷰에서 AI 혁명에 대해 “대부분 사기”라는 표현을 사용하며, AI를 유독성 마케팅 용어로 규정하는 회의적 시각을 드러냄
            수학적으로 인상적인 기술인 것은 인정하면서도, AI라는 이름이 실제 기술적 실체인 고급 통계 기법의 본질을 흐리는 문제를 지적함
            벤처캐피털이 주도하는 AI 열풍은 “사기꾼과 과대광고꾼들의 집결지”라며, 실제 유용한 기술보다는 엑싯 중심의 단기 수익 추구 경향을 강하게 비판함
            대부분의 AI 투자금은 결국 “블랙홀로 빨려 들어갈 것”이라며, 지속가능성 없는 유행 중심 자금 흐름에 대한 경고를 제시함
            Is It a Vibe? AI Coding Tools: Impressive Demos, Limited Utility
            생성형 AI 코드 도구는 초기 인상은 강렬하지만, 조금만 복잡해져도 실패하는 한계적 구조를 가짐
            이 도구들은 기존 코드 샘플을 스크랩해 반복할 수 있을 뿐이며, 진짜로 흥미로운 문제는 항상 새롭기 때문에 복제 기반 도구와 맞지 않음
            전문가용 개발 환경에서는 패턴화된 코드가 라이브러리로 수렴되므로, AI의 코드 생성은 현실 개발 요구와 구조적으로 충돌함
            고슬링은 AI의 진짜 쓸모를 “아무도 쓰고 싶어하지 않는 문서화 작업을 대신하는 검색 도구”로 정의하며, API 사용법 설명에 특화된 보조 도구로서의 가치를 강조함
            Java’s Evolution: Language Features and Runtime Improvements
            최근 자바 언어의 변화 중 타입 추론과 배열 선언 방식 개선 등은 개발 편의성을 높인 유용한 기능 확장으로 평가됨
            그러나 고슬링은 자바의 가장 인상적인 발전은 JVM 실행 환경과 표준 라이브러리의 품질 향상에 있다고 강조함
            최신 JVM은 코드 품질, 스레드 성능, 가비지 컬렉션 측면에서 “놀라운 수준”에 도달한 실행 성능을 보여줌
            메모리 관리와 성능 예측 가능성 측면에서 malloc 기반 C 언어보다 효율적이며, GC 일시 중단 시간을 수 밀리초로 줄이는 튜닝 가능성도 언급됨
            지금의 JVM은 터무니없이 큰 메모리 공간도 안정적으로 처리할 수 있는 고성능 런타임 환경으로 평가됨
            Programming Languages for Critical Infrastructure
            FAA 항공 관제 시스템을 어떤 언어로 재작성할 것인가에 대해 고슬링은 “망치를 고르며 집을 짓는 격”이라며 질문의 전제를 거부함
            먼저 통신 시스템, 국제 규정, 비행 경로 및 충돌 회피 등 문제 도메인의 속성을 명확히 이해한 후 기술을 선택해야 한다는 점을 강조함
            다만 신뢰성이 중요한 대규모 시스템에는 자바가 강력한 후보가 될 수 있다는 가능성도 부연함
            The Future of Programming in an AI World
            AI가 발전하더라도 프로그래밍은 여전히 필수 기술이라는 점에서, 고슬링은 자녀가 있다면 무조건 코딩을 가르치겠다는 입장을 밝힘
            AI가 인간 개발자를 대체할 것이라는 빅테크 경영진들의 주장은 노동 강도를 높이기 위한 자기방어적 협박에 불과하다고 비판함
            시스템을 제대로 이해하기 위해선 프로그래밍 역량이 필요하며, 기계가 대신하더라도 인간의 기술적 이해 기반은 지속돼야 한다는 주장을 전개함
            Java’s Longevity Secret
            자바가 30년 이상 살아남을 수 있었던 이유로 고슬링은 실제 문제 해결력, 사용자 존중, 하위호환성, 생산성 향상, 신뢰성 중심 철학을 제시함
            언어의 유행보다 일관된 실용성을 강조해왔으며, 스타일보다 결과에 집중한 현실 중심 설계 철학이 엔터프라이즈 환경에서 특히 효과적이었음
            소프트웨어는 “항상 제대로 작동해야 한다”는 관점에서, 자바는 정직하고 실용적인 엔지니어링 도구로 남아 있음
            Oracle’s Stewardship: Better Than Expected
            고슬링은 Sun Microsystems 인수 이후 Oracle의 자바 운영에 대해 “생각보다 훨씬 잘했다”며 예상을 뛰어넘은 성과에 놀라움을 표함
            초기에는 과거 행보 때문에 '강탈과 약탈'을 우려했으나, 실제로는 자바 팀을 방해하지 않고 보호한 점에서 독립성과 기술 중심 운영에 긍정적 평가를 내림
            재정 지원은 부족했다고 지적했지만, 기업 간섭 없이 기술팀의 자율성이 보장된 구조가 유지되었다는 점에 높은 점수를 부여함
            Crab Lovers Unite!
            고슬링은 함께 식사하고 싶은 사람과 일하고 싶다고 말해왔으며, 사람 중심의 협업 기준을 중시하는 태도를 보여줌
            기자는 샌프란시스코의 게 요리 전문점 Thanh Long에서 우연히 고슬링과 마주쳤고, 기술계 거물이 평범한 일상 속에서 발견되는 순간을 기록함
            이후 두 사람은 함께 게 요리를 먹으며 대화를 나누었고, 다음 만남을 같은 장소에서 하자는 약속을 통해 기술을 넘어선 인간적인 교류의 따뜻함을 전함
            """;



        String script = geminiClient.createScript(originText, promptText);


        System.out.println(script);
    }

}
